package scala.pickling.non.primitive.fields3

import org.scalatest.FunSuite
import scala.pickling._, scala.pickling.Defaults._, json._

case class Person(name: String, age: Int)
case class Philipp(mother: Person, father: Person)

class NonPrimitiveFields3Test extends FunSuite
  test("main")
    val gudrun = Person("Gudrun", 62)
    val rudolf = Person("Rudolf", 70)
    val pckl = Philipp(gudrun, rudolf).pickle
    // Note: Previously the nested case classes would not have type tags. However, `Person` is not a sealed type,
    //       an therefore we DO require the tag for autogenerated picklers.
    assert(
        pckl.value === """
      |{
      |  "$type": "scala.pickling.non.primitive.fields3.Philipp",
      |  "mother": {
      |    "$type": "scala.pickling.non.primitive.fields3.Person",
      |    "name": "Gudrun",
      |    "age": 62
      |  },
      |  "father": {
      |    "$type": "scala.pickling.non.primitive.fields3.Person",
      |    "name": "Rudolf",
      |    "age": 70
      |  }
      |}
    """.stripMargin.trim)
    assert(pckl.unpickle[Philipp] === Philipp(gudrun, rudolf))
